
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jxhkpzdbfvefcapwgrwn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp4aGtwemRiZnZlZmNhcHdncnduIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMxMjUxNTIsImV4cCI6MjA1ODcwMTE1Mn0.OTGNN7ul4kcRCheobvNOIAz6WIAjP2ZsGNp5MtVGsbo";

// Create client but ensure all database operations fallback to localStorage
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: localStorage
  }
});

// Function to save posts to localStorage as a fallback
export const savePostsToLocalStorage = (posts, clientId) => {
  try {
    // Get existing posts from localStorage
    const existingPostsJSON = localStorage.getItem('calendarPosts');
    let existingPosts = [];
    
    if (existingPostsJSON) {
      existingPosts = JSON.parse(existingPostsJSON);
      
      // Remove any posts for this client (to update them)
      existingPosts = existingPosts.filter(post => post.clientId !== clientId);
    }
    
    // Add the new/updated posts for this client
    const updatedPosts = [...existingPosts, ...posts];
    
    // Save back to localStorage
    localStorage.setItem('calendarPosts', JSON.stringify(updatedPosts));
    
    return true;
  } catch (error) {
    console.error('Error saving posts to localStorage:', error);
    return false;
  }
};

// Function to get posts from localStorage by clientId
export const getPostsFromLocalStorage = (clientId) => {
  try {
    const postsJSON = localStorage.getItem('calendarPosts');
    if (!postsJSON) return [];
    
    const allPosts = JSON.parse(postsJSON);
    return allPosts.filter(post => post.clientId === clientId);
  } catch (error) {
    console.error('Error getting posts from localStorage:', error);
    return [];
  }
};

// Function to get all posts from localStorage
export const getAllPostsFromLocalStorage = () => {
  try {
    const postsJSON = localStorage.getItem('calendarPosts');
    if (!postsJSON) return [];
    
    return JSON.parse(postsJSON);
  } catch (error) {
    console.error('Error getting all posts from localStorage:', error);
    return [];
  }
};

// Function to save a single post to localStorage
export const savePostToLocalStorage = (post) => {
  try {
    const allPosts = getAllPostsFromLocalStorage();
    
    // Check if post already exists (by id)
    const existingPostIndex = allPosts.findIndex(p => p.id === post.id);
    
    if (existingPostIndex >= 0) {
      // Update existing post
      allPosts[existingPostIndex] = post;
    } else {
      // Add new post
      allPosts.push(post);
    }
    
    localStorage.setItem('calendarPosts', JSON.stringify(allPosts));
    return true;
  } catch (error) {
    console.error('Error saving post to localStorage:', error);
    return false;
  }
};

// Function to delete a post from localStorage
export const deletePostFromLocalStorage = (postId) => {
  try {
    const allPosts = getAllPostsFromLocalStorage();
    const filteredPosts = allPosts.filter(post => post.id !== postId);
    localStorage.setItem('calendarPosts', JSON.stringify(filteredPosts));
    return true;
  } catch (error) {
    console.error('Error deleting post from localStorage:', error);
    return false;
  }
};

// Function to update post completion status
export const updatePostCompletionStatus = (postId, completed) => {
  try {
    const allPosts = getAllPostsFromLocalStorage();
    const updatedPosts = allPosts.map(post => {
      if (post.id === postId) {
        return { ...post, completed };
      }
      return post;
    });
    
    localStorage.setItem('calendarPosts', JSON.stringify(updatedPosts));
    return true;
  } catch (error) {
    console.error('Error updating post completion status:', error);
    return false;
  }
};

// Function to update post notes
export const updatePostNotes = (postId, notes) => {
  try {
    const allPosts = getAllPostsFromLocalStorage();
    const updatedPosts = allPosts.map(post => {
      if (post.id === postId) {
        return { ...post, notes };
      }
      return post;
    });
    
    localStorage.setItem('calendarPosts', JSON.stringify(updatedPosts));
    return true;
  } catch (error) {
    console.error('Error updating post notes:', error);
    return false;
  }
};

// Function to update post content
export const updatePostContent = (postId, updates) => {
  try {
    const allPosts = getAllPostsFromLocalStorage();
    const updatedPosts = allPosts.map(post => {
      if (post.id === postId) {
        return { ...post, ...updates };
      }
      return post;
    });
    
    localStorage.setItem('calendarPosts', JSON.stringify(updatedPosts));
    return true;
  } catch (error) {
    console.error('Error updating post content:', error);
    return false;
  }
};

// Function to add image to post
export const addImageToPost = (postId, imageUrl) => {
  try {
    const allPosts = getAllPostsFromLocalStorage();
    const updatedPosts = allPosts.map(post => {
      if (post.id === postId) {
        const currentImages = post.images || [];
        return { ...post, images: [...currentImages, imageUrl] };
      }
      return post;
    });
    
    localStorage.setItem('calendarPosts', JSON.stringify(updatedPosts));
    return true;
  } catch (error) {
    console.error('Error adding image to post:', error);
    return false;
  }
};

// Function to remove image from post
export const removeImageFromPost = (postId, imageUrl) => {
  try {
    const allPosts = getAllPostsFromLocalStorage();
    const updatedPosts = allPosts.map(post => {
      if (post.id === postId) {
        const filteredImages = (post.images || []).filter(img => img !== imageUrl);
        return { ...post, images: filteredImages };
      }
      return post;
    });
    
    localStorage.setItem('calendarPosts', JSON.stringify(updatedPosts));
    return true;
  } catch (error) {
    console.error('Error removing image from post:', error);
    return false;
  }
};

// These functions are now stubs that simulate the Supabase functionality
// but don't actually connect to Supabase - they're only for type compatibility
export const checkSupabaseTables = async () => {
  console.warn('Supabase not properly configured, falling back to localStorage');
  return false;
};

export const ensureStorageBucketExists = async () => {
  console.warn('Supabase storage not properly configured');
  return false;
};
