
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jxhkpzdbfvefcapwgrwn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp4aGtwemRiZnZlZmNhcHdncnduIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMxMjUxNTIsImV4cCI6MjA1ODcwMTE1Mn0.OTGNN7ul4kcRCheobvNOIAz6WIAjP2ZsGNp5MtVGsbo";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: localStorage
  }
});

// Helper function to check if Supabase tables exist
export const checkSupabaseTables = async () => {
  try {
    // Try to query the calendar_posts table
    const { data, error } = await supabase
      .from('calendar_posts')
      .select('id')
      .limit(1);
      
    if (error) {
      console.error('Error checking Supabase tables:', error);
      return false;
    }
    
    console.log('Supabase tables check successful');
    return true;
  } catch (error) {
    console.error('Failed to check Supabase tables:', error);
    return false;
  }
};

// Helper to create a storage bucket if it doesn't exist
export const ensureStorageBucketExists = async () => {
  try {
    // Check if bucket exists first
    const { data: buckets, error: listError } = await supabase
      .storage
      .listBuckets();
      
    const bucketExists = buckets?.some(bucket => bucket.name === 'post_images');
    
    if (!bucketExists) {
      console.log('Creating post_images bucket...');
      const { error } = await supabase
        .storage
        .createBucket('post_images', {
          public: true,
          fileSizeLimit: 10485760, // 10MB
          allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp']
        });
        
      if (error) {
        console.error('Error creating storage bucket:', error);
        return false;
      }
    }
    
    return true;
  } catch (error) {
    console.error('Error ensuring storage bucket exists:', error);
    return false;
  }
};

// Function to save posts to localStorage as a fallback
export const savePostsToLocalStorage = (posts, clientId) => {
  try {
    // Get existing posts from localStorage
    const existingPostsJSON = localStorage.getItem('calendarPosts');
    let existingPosts = [];
    
    if (existingPostsJSON) {
      existingPosts = JSON.parse(existingPostsJSON);
      
      // Remove any posts for this client (to update them)
      existingPosts = existingPosts.filter(post => post.clientId !== clientId);
    }
    
    // Add the new/updated posts for this client
    const updatedPosts = [...existingPosts, ...posts];
    
    // Save back to localStorage
    localStorage.setItem('calendarPosts', JSON.stringify(updatedPosts));
    
    return true;
  } catch (error) {
    console.error('Error saving posts to localStorage:', error);
    return false;
  }
};

// Function to get posts from localStorage by clientId
export const getPostsFromLocalStorage = (clientId) => {
  try {
    const postsJSON = localStorage.getItem('calendarPosts');
    if (!postsJSON) return [];
    
    const allPosts = JSON.parse(postsJSON);
    return allPosts.filter(post => post.clientId === clientId);
  } catch (error) {
    console.error('Error getting posts from localStorage:', error);
    return [];
  }
};

